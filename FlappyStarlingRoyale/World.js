/**
 * Generated by Apache Royale Compiler from World.as
 * World
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('World');
/* Royale Dependency List: Game,Obstacle,openfl.geom.Rectangle,org.apache.royale.utils.Language*/




/**
 * @constructor
 * @extends {starling.display.Sprite}
 * @param {number} width
 * @param {number} height
 */
World = function(width, height) {
  World.base(this, 'constructor');
  this.World__phase = World.PHASE_IDLE;
  this.World__width = width;
  this.World__height = height;
  this.World_addBackground();
  this.World_addObstacleSprite();
  this.World_addGround();
  this.World_addBird();
};
goog.inherits(World, starling.display.Sprite);


/**
 * @private
 * @const
 * @type {number}
 */
World.SCROLL_VELOCITY = 130;


/**
 * @private
 * @const
 * @type {number}
 */
World.FLAP_VELOCITY = -300;


/**
 * @private
 * @const
 * @type {number}
 */
World.GRAVITY = 800;


/**
 * @private
 * @const
 * @type {number}
 */
World.BIRD_RADIUS = 18;


/**
 * @private
 * @const
 * @type {number}
 */
World.OBSTACLE_DISTANCE = 180;


/**
 * @private
 * @const
 * @type {number}
 */
World.OBSTACLE_GAP_HEIGHT = 170;


/**
 * @private
 * @const
 * @type {number}
 */
World.OBSTACLE_Y_RANGE = 270;


/**
 * @nocollapse
 * @const
 * @type {string}
 */
World.BIRD_CRASHED = "birdCrashed";


/**
 * @nocollapse
 * @const
 * @type {string}
 */
World.OBSTACLE_PASSED = "obstaclePassed";


/**
 * @nocollapse
 * @const
 * @type {string}
 */
World.PHASE_IDLE = "phaseIdle";


/**
 * @nocollapse
 * @const
 * @type {string}
 */
World.PHASE_PLAYING = "phasePlaying";


/**
 * @nocollapse
 * @const
 * @type {string}
 */
World.PHASE_CRASHED = "phaseCrashed";


/**
 * @private
 * @type {string}
 */
World.prototype.World__phase = null;


/**
 * @private
 * @type {number}
 */
World.prototype.World__width = NaN;


/**
 * @private
 * @type {number}
 */
World.prototype.World__height = NaN;


/**
 * @private
 * @type {starling.display.Image}
 */
World.prototype.World__ground = null;


/**
 * @private
 * @type {starling.display.Sprite}
 */
World.prototype.World__obstacles = null;


/**
 * @private
 * @type {starling.display.MovieClip}
 */
World.prototype.World__bird = null;


/**
 * @private
 * @type {number}
 */
World.prototype.World__birdVelocity = 0.0;


/**
 * @private
 * @type {number}
 */
World.prototype.World__currentX = NaN;


/**
 * @private
 * @type {number}
 */
World.prototype.World__lastObstacleX = NaN;


/**
 * @private
 */
World.prototype.World_addBackground = function() {
  var /** @type {starling.textures.Texture} */ skyTexture = Game.assets.getTexture("sky");
  var /** @type {starling.display.Image} */ sky = new starling.display.Image(skyTexture);
  sky.y = this.World__height - skyTexture.height;
  this.addChild(sky);
  var /** @type {starling.display.Image} */ cloud1 = new starling.display.Image(Game.assets.getTexture("cloud-1"));
  cloud1.x = this.World__width * 0.5;
  cloud1.y = this.World__height * 0.1;
  this.addChild(cloud1);
  var /** @type {starling.display.Image} */ cloud2 = new starling.display.Image(Game.assets.getTexture("cloud-2"));
  cloud2.x = this.World__width * 0.1;
  cloud2.y = this.World__height * 0.2;
  this.addChild(cloud2);
};


/**
 * @private
 */
World.prototype.World_addBird = function() {
  var /** @type {Array.<starling.textures.Texture>} */ birdTextures = Game.assets.getTextures("bird-");
  birdTextures.push(birdTextures[1]);
  this.World__bird = new starling.display.MovieClip(birdTextures);
  this.World__bird.pivotX = 46;
  this.World__bird.pivotY = 45;
  this.World__bird.pixelSnapping = true;
  this.addChild(this.World__bird);
  this.World_resetBird();
};


/**
 * @private
 */
World.prototype.World_addGround = function() {
  var /** @type {starling.textures.Texture} */ tile = Game.assets.getTexture("ground");
  this.World__ground = new starling.display.Image(tile);
  this.World__ground.y = this.World__height - tile.height;
  this.World__ground.width = this.World__width;
  this.World__ground.tileGrid = new openfl.geom.Rectangle(0, 0, tile.width, tile.height);
  this.addChild(this.World__ground);
};


/**
 * @private
 */
World.prototype.World_addObstacleSprite = function() {
  this.World__obstacles = new starling.display.Sprite();
  this.addChild(this.World__obstacles);
};


/**
 * @private
 */
World.prototype.World_addObstacle = function() {
  var /** @type {number} */ yRange = (Math.min(World.OBSTACLE_Y_RANGE, this.World__ground.y - World.OBSTACLE_GAP_HEIGHT)) >> 0;
  var /** @type {number} */ minY = (this.World__ground.y - yRange) / 2;
  var /** @type {number} */ maxY = this.World__ground.y - minY;
  var /** @type {Obstacle} */ obstacle = new Obstacle(World.OBSTACLE_GAP_HEIGHT);
  obstacle.y = minY + Math.random() * (maxY - minY);
  obstacle.x = this.World__width + obstacle.width / 2;
  this.World__obstacles.addChild(obstacle);
};


/**
 */
World.prototype.start = function() {
  this.World__phase = World.PHASE_PLAYING;
  this.World__currentX = this.World__lastObstacleX = 0;
};


/**
 */
World.prototype.reset = function() {
  this.World__phase = World.PHASE_IDLE;
  this.World__obstacles.removeChildren(0, -1, true);
  this.World_resetBird();
};


/**
 * @private
 */
World.prototype.World_resetBird = function() {
  this.World__bird.x = this.World__width / 3;
  this.World__bird.y = this.World__height / 2;
};


/**
 * @private
 */
World.prototype.World_checkForCollisions = function() {
  var /** @type {number} */ bottom = this.World__ground.y - World.BIRD_RADIUS;
  var /** @type {boolean} */ collision = false;
  if (this.World__bird.y > bottom) {
    this.World__bird.y = bottom;
    this.World__birdVelocity = 0;
    collision = true;
  } else {
    for (var /** @type {number} */ i = 0; i < this.World__obstacles.numChildren; ++i) {
      var /** @type {Obstacle} */ obstacle = org.apache.royale.utils.Language.as(this.World__obstacles.getChildAt(i), Obstacle);
      if (!obstacle.passed && this.World__bird.x > obstacle.x) {
        obstacle.passed = true;
        this.dispatchEventWith(World.OBSTACLE_PASSED, true);
      }
      if (obstacle.collidesWithBird(this.World__bird.x, this.World__bird.y, World.BIRD_RADIUS)) {
        collision = true;
        break;
      }
    }
  }
  if (collision) {
    this.World__phase = World.PHASE_CRASHED;
    this.dispatchEventWith(World.BIRD_CRASHED);
  }
};


/**
 */
World.prototype.flapBird = function() {
  this.World__birdVelocity = World.FLAP_VELOCITY;
};


/**
 * @param {number} passedTime
 */
World.prototype.advanceTime = function(passedTime) {
  if (this.World__phase == World.PHASE_IDLE || this.World__phase == World.PHASE_PLAYING) {
    this.World__bird.advanceTime(passedTime);
    this.World_advanceGround(passedTime);
  }
  if (this.World__phase == World.PHASE_PLAYING) {
    this.World__currentX += World.SCROLL_VELOCITY * passedTime;
    this.World_advanceObstacles(passedTime);
    this.World_advancePhysics(passedTime);
    this.World_checkForCollisions();
  }
};


/**
 * @private
 * @param {number} passedTime
 */
World.prototype.World_advanceGround = function(passedTime) {
  var /** @type {number} */ distance = World.SCROLL_VELOCITY * passedTime;
  this.World__ground.tileGrid.x -= distance;
  this.World__ground.tileGrid = this.World__ground.tileGrid;
};


/**
 * @private
 * @param {number} passedTime
 */
World.prototype.World_advancePhysics = function(passedTime) {
  this.World__bird.y += this.World__birdVelocity * passedTime;
  this.World__birdVelocity += World.GRAVITY * passedTime;
};


/**
 * @private
 * @param {number} passedTime
 */
World.prototype.World_advanceObstacles = function(passedTime) {
  var /** @type {Obstacle} */ obstacle = null;
  if (this.World__currentX >= this.World__lastObstacleX + World.OBSTACLE_DISTANCE) {
    this.World__lastObstacleX = this.World__currentX;
    this.World_addObstacle();
  }
  //var /** @type {Obstacle} */ obstacle = null;
  var /** @type {number} */ numObstacles = this.World__obstacles.numChildren;
  for (var /** @type {number} */ i = 0; i < numObstacles; ++i) {
    obstacle = org.apache.royale.utils.Language.as(this.World__obstacles.getChildAt(i), Obstacle);
    if (obstacle.x < -obstacle.width) {
      i--;
      numObstacles--;
      obstacle.removeFromParent(true);
    }
    else
      obstacle.x -= passedTime * World.SCROLL_VELOCITY;
  }
};


/**
 * @nocollapse
 * @export
 * @type {string}
 */
World.prototype.phase;


World.prototype.get__phase = function() {
  return this.World__phase;
};


Object.defineProperties(World.prototype, /** @lends {World.prototype} */ {
/**
 * @type {string}
 */
phase: {
get: World.prototype.get__phase}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
World.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'World', qName: 'World', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
World.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    accessors: function () {
      return {
        'phase': { type: 'String', access: 'readonly', declaredBy: 'World'}
      };
    },
    methods: function () {
      return {
        'World': { type: '', declaredBy: 'World', parameters: function () { return [ 'Number', false ,'Number', false ]; }},
        'start': { type: 'void', declaredBy: 'World'},
        'reset': { type: 'void', declaredBy: 'World'},
        'flapBird': { type: 'void', declaredBy: 'World'},
        'advanceTime': { type: 'void', declaredBy: 'World', parameters: function () { return [ 'Number', false ]; }}
      };
    }
  };
};
/**
 * @const
 * @type {number}
 */
World.prototype.ROYALE_COMPILE_FLAGS = 9;
/**
 * Provide reflection support for distinguishing dynamic fields on class object (static)
 * @const
 * @type {Array<string>}
 */
World.prototype.ROYALE_INITIAL_STATICS = Object.keys(World);

//# sourceMappingURL=./World.js.map
