/**
 * Generated by Apache Royale Compiler from /home/joshua/Development/Haxe/openfl/lib/openfl/display/DisplayObject.as
 * openfl.display.DisplayObject
 *
 * @fileoverview
 * @externs
 *
 * @suppress {checkTypes|accessControls}
 */

/** @const */
var openfl = {};
/** @const */
openfl.display = {};

/**
 * @constructor
 * @extends {openfl.events.EventDispatcher}
 * @implements {openfl.display.IBitmapDrawable}
 */
openfl.display.DisplayObject = function() {
};


/**
 * @export
 * @type {number}
 */
openfl.display.DisplayObject.prototype.alpha = NaN;


/**
 * @protected
 * @return {number}
 */
openfl.display.DisplayObject.prototype.get_alpha = function() {
  return 0;
};


/**
 * @protected
 * @param {number} value
 * @return {number}
 */
openfl.display.DisplayObject.prototype.set_alpha = function(value) {
  return 0;
};


/**
 * @export
 * @type {string}
 */
openfl.display.DisplayObject.prototype.blendMode = null;


/**
 * @protected
 * @return {string}
 */
openfl.display.DisplayObject.prototype.get_blendMode = function() {
  return null;
};


/**
 * @protected
 * @param {string} value
 * @return {string}
 */
openfl.display.DisplayObject.prototype.set_blendMode = function(value) {
  return null;
};


/**
 * @export
 * @type {boolean}
 */
openfl.display.DisplayObject.prototype.cacheAsBitmap = false;


/**
 * @protected
 * @return {boolean}
 */
openfl.display.DisplayObject.prototype.get_cacheAsBitmap = function() {
  return false;
};


/**
 * @protected
 * @param {boolean} value
 * @return {boolean}
 */
openfl.display.DisplayObject.prototype.set_cacheAsBitmap = function(value) {
  return false;
};


/**
 * @export
 * @type {openfl.geom.Matrix}
 */
openfl.display.DisplayObject.prototype.cacheAsBitmapMatrix = null;


/**
 * @protected
 * @return {openfl.geom.Matrix}
 */
openfl.display.DisplayObject.prototype.get_cacheAsBitmapMatrix = function() {
  return null;
};


/**
 * @protected
 * @param {openfl.geom.Matrix} value
 * @return {openfl.geom.Matrix}
 */
openfl.display.DisplayObject.prototype.set_cacheAsBitmapMatrix = function(value) {
  return null;
};


/**
 * @export
 * @type {Array}
 */
openfl.display.DisplayObject.prototype.filters = null;


/**
 * @protected
 * @return {Array}
 */
openfl.display.DisplayObject.prototype.get_filters = function() {
  return null;
};


/**
 * @protected
 * @param {Array} value
 * @return {Array}
 */
openfl.display.DisplayObject.prototype.set_filters = function(value) {
  return null;
};


/**
 * @export
 * @type {number}
 */
openfl.display.DisplayObject.prototype.height = NaN;


/**
 * @protected
 * @return {number}
 */
openfl.display.DisplayObject.prototype.get_height = function() {
  return 0;
};


/**
 * @protected
 * @param {number} value
 * @return {number}
 */
openfl.display.DisplayObject.prototype.set_height = function(value) {
  return 0;
};


/**
 * @protected
 * @return {openfl.display.LoaderInfo}
 */
openfl.display.DisplayObject.prototype.get_loaderInfo = function() {
  return null;
};


/**
 * @export
 * @type {openfl.display.DisplayObject}
 */
openfl.display.DisplayObject.prototype.mask = null;


/**
 * @protected
 * @return {openfl.display.DisplayObject}
 */
openfl.display.DisplayObject.prototype.get_mask = function() {
  return null;
};


/**
 * @protected
 * @param {openfl.display.DisplayObject} value
 * @return {openfl.display.DisplayObject}
 */
openfl.display.DisplayObject.prototype.set_mask = function(value) {
  return null;
};


/**
 * @protected
 * @return {number}
 */
openfl.display.DisplayObject.prototype.get_mouseX = function() {
  return 0;
};


/**
 * @protected
 * @return {number}
 */
openfl.display.DisplayObject.prototype.get_mouseY = function() {
  return 0;
};


/**
 * @export
 * @type {string}
 */
openfl.display.DisplayObject.prototype.name = null;


/**
 * @protected
 * @return {string}
 */
openfl.display.DisplayObject.prototype.get_name = function() {
  return null;
};


/**
 * @protected
 * @param {string} value
 * @return {string}
 */
openfl.display.DisplayObject.prototype.set_name = function(value) {
  return null;
};


/**
 * @export
 * @type {Object}
 */
openfl.display.DisplayObject.prototype.opaqueBackground = null;


/**
 * @protected
 * @return {openfl.display.DisplayObject}
 */
openfl.display.DisplayObject.prototype.get_root = function() {
  return null;
};


/**
 * @export
 * @type {number}
 */
openfl.display.DisplayObject.prototype.rotation = NaN;


/**
 * @protected
 * @return {number}
 */
openfl.display.DisplayObject.prototype.get_rotation = function() {
  return 0;
};


/**
 * @protected
 * @param {number} value
 * @return {number}
 */
openfl.display.DisplayObject.prototype.set_rotation = function(value) {
  return 0;
};


/**
 * @export
 * @type {openfl.geom.Rectangle}
 */
openfl.display.DisplayObject.prototype.scale9Grid = null;


/**
 * @export
 * @type {number}
 */
openfl.display.DisplayObject.prototype.scaleX = NaN;


/**
 * @protected
 * @return {number}
 */
openfl.display.DisplayObject.prototype.get_scaleX = function() {
  return 0;
};


/**
 * @protected
 * @param {number} value
 * @return {number}
 */
openfl.display.DisplayObject.prototype.set_scaleX = function(value) {
  return 0;
};


/**
 * @export
 * @type {number}
 */
openfl.display.DisplayObject.prototype.scaleY = NaN;


/**
 * @protected
 * @return {number}
 */
openfl.display.DisplayObject.prototype.get_scaleY = function() {
  return 0;
};


/**
 * @protected
 * @param {number} value
 * @return {number}
 */
openfl.display.DisplayObject.prototype.set_scaleY = function(value) {
  return 0;
};


/**
 * @export
 * @type {openfl.geom.Rectangle}
 */
openfl.display.DisplayObject.prototype.scrollRect = null;


/**
 * @protected
 * @return {openfl.geom.Rectangle}
 */
openfl.display.DisplayObject.prototype.get_scrollRect = function() {
  return null;
};


/**
 * @protected
 * @param {openfl.geom.Rectangle} value
 * @return {openfl.geom.Rectangle}
 */
openfl.display.DisplayObject.prototype.set_scrollRect = function(value) {
  return null;
};


/**
 * @export
 * @type {openfl.display.Shader}
 */
openfl.display.DisplayObject.prototype.shader = null;


/**
 * @protected
 * @return {openfl.display.Shader}
 */
openfl.display.DisplayObject.prototype.get_shader = function() {
  return null;
};


/**
 * @protected
 * @param {openfl.display.Shader} value
 * @return {openfl.display.Shader}
 */
openfl.display.DisplayObject.prototype.set_shader = function(value) {
  return null;
};


/**
 * @protected
 * @return {openfl.display.Stage}
 */
openfl.display.DisplayObject.prototype.get_stage = function() {
  return null;
};


/**
 * @protected
 * @param {openfl.display.Stage} value
 * @return {openfl.display.Stage}
 */
openfl.display.DisplayObject.prototype.set_stage = function(value) {
  return null;
};


/**
 * @export
 * @type {openfl.geom.Transform}
 */
openfl.display.DisplayObject.prototype.transform = null;


/**
 * @protected
 * @return {openfl.geom.Transform}
 */
openfl.display.DisplayObject.prototype.get_transform = function() {
  return null;
};


/**
 * @protected
 * @param {openfl.geom.Transform} value
 * @return {openfl.geom.Transform}
 */
openfl.display.DisplayObject.prototype.set_transform = function(value) {
  return null;
};


/**
 * @export
 * @type {boolean}
 */
openfl.display.DisplayObject.prototype.visible = false;


/**
 * @protected
 * @return {boolean}
 */
openfl.display.DisplayObject.prototype.get_visible = function() {
  return false;
};


/**
 * @protected
 * @param {boolean} value
 * @return {boolean}
 */
openfl.display.DisplayObject.prototype.set_visible = function(value) {
  return false;
};


/**
 * @export
 * @type {number}
 */
openfl.display.DisplayObject.prototype.width = NaN;


/**
 * @protected
 * @return {number}
 */
openfl.display.DisplayObject.prototype.get_width = function() {
  return 0;
};


/**
 * @protected
 * @param {number} value
 * @return {number}
 */
openfl.display.DisplayObject.prototype.set_width = function(value) {
  return 0;
};


/**
 * @export
 * @type {number}
 */
openfl.display.DisplayObject.prototype.x = NaN;


/**
 * @protected
 * @return {number}
 */
openfl.display.DisplayObject.prototype.get_x = function() {
  return 0;
};


/**
 * @protected
 * @param {number} value
 * @return {number}
 */
openfl.display.DisplayObject.prototype.set_x = function(value) {
  return 0;
};


/**
 * @export
 * @type {number}
 */
openfl.display.DisplayObject.prototype.y = NaN;


/**
 * @protected
 * @return {number}
 */
openfl.display.DisplayObject.prototype.get_y = function() {
  return 0;
};


/**
 * @protected
 * @param {number} value
 * @return {number}
 */
openfl.display.DisplayObject.prototype.set_y = function(value) {
  return 0;
};


/**
 * Returns a rectangle that defines the area of the display object relative
 * to the coordinate system of the `targetCoordinateSpace` object.
 * Consider the following code, which shows how the rectangle returned can
 * vary depending on the `targetCoordinateSpace` parameter that
 * you pass to the method:
 *
 * **Note:** Use the `localToGlobal()` and
 * `globalToLocal()` methods to convert the display object's local
 * coordinates to display coordinates, or display coordinates to local
 * coordinates, respectively.
 *
 * The `getBounds()` method is similar to the
 * `getRect()` method; however, the Rectangle returned by the
 * `getBounds()` method includes any strokes on shapes, whereas
 * the Rectangle returned by the `getRect()` method does not. For
 * an example, see the description of the `getRect()` method.
 * 
 * @asparam targetCoordinateSpace The display object that defines the
 *                              coordinate system to use.
 * @asreturn The rectangle that defines the area of the display object relative
 *         to the `targetCoordinateSpace` object's coordinate
 *         system.
 * @export
 * @param {openfl.display.DisplayObject} targetCoordinateSpace
 * @return {openfl.geom.Rectangle}
 */
openfl.display.DisplayObject.prototype.getBounds = function(targetCoordinateSpace) {
  return null;
};


/**
 * Returns a rectangle that defines the boundary of the display object, based
 * on the coordinate system defined by the `targetCoordinateSpace`
 * parameter, excluding any strokes on shapes. The values that the
 * `getRect()` method returns are the same or smaller than those
 * returned by the `getBounds()` method.
 *
 * **Note:** Use `localToGlobal()` and
 * `globalToLocal()` methods to convert the display object's local
 * coordinates to Stage coordinates, or Stage coordinates to local
 * coordinates, respectively.
 * 
 * @asparam targetCoordinateSpace The display object that defines the
 *                              coordinate system to use.
 * @asreturn The rectangle that defines the area of the display object relative
 *         to the `targetCoordinateSpace` object's coordinate
 *         system.
 * @export
 * @param {openfl.display.DisplayObject} targetCoordinateSpace
 * @return {openfl.geom.Rectangle}
 */
openfl.display.DisplayObject.prototype.getRect = function(targetCoordinateSpace) {
  return null;
};


/**
 * Converts the `point` object from the Stage(global) coordinates
 * to the display object's(local) coordinates.
 *
 * To use this method, first create an instance of the Point class. The
 * _x_ and _y_ values that you assign represent global coordinates
 * because they relate to the origin(0,0) of the main display area. Then
 * pass the Point instance as the parameter to the
 * `globalToLocal()` method. The method returns a new Point object
 * with _x_ and _y_ values that relate to the origin of the display
 * object instead of the origin of the Stage.
 * 
 * @asparam point An object created with the Point class. The Point object
 *              specifies the _x_ and _y_ coordinates as
 *              properties.
 * @asreturn A Point object with coordinates relative to the display object.
 * @export
 * @param {openfl.geom.Point} pos
 * @return {openfl.geom.Point}
 */
openfl.display.DisplayObject.prototype.globalToLocal = function(pos) {
  return null;
};


/**
 * Evaluates the bounding box of the display object to see if it overlaps or
 * intersects with the bounding box of the `obj` display object.
 * 
 * @asparam obj The display object to test against.
 * @asreturn `true` if the bounding boxes of the display objects
 *         intersect; `false` if not.
 * @export
 * @param {openfl.display.DisplayObject} obj
 * @return {boolean}
 */
openfl.display.DisplayObject.prototype.hitTestObject = function(obj) {
  return false;
};


/**
 * Evaluates the display object to see if it overlaps or intersects with the
 * point specified by the `x` and `y` parameters. The
 * `x` and `y` parameters specify a point in the
 * coordinate space of the Stage, not the display object container that
 * contains the display object(unless that display object container is the
 * Stage).
 * 
 * @asparam x         The _x_ coordinate to test against this object.
 * @asparam y         The _y_ coordinate to test against this object.
 * @asparam shapeFlag Whether to check against the actual pixels of the object
 *                 (`true`) or the bounding box
 *                 (`false`).
 * @asreturn `true` if the display object overlaps or intersects
 *         with the specified point; `false` otherwise.
 * @export
 * @param {number} x
 * @param {number} y
 * @param {boolean=} shapeFlag
 * @return {boolean}
 */
openfl.display.DisplayObject.prototype.hitTestPoint = function(x, y, shapeFlag) {
  return false;
};


/**
 * Calling the `invalidate()` method signals to have the current object 
 * redrawn the next time the object is eligible to be rendered.
 * @export
 */
openfl.display.DisplayObject.prototype.invalidate = function() {
};


/**
 * Converts the `point` object from the display object's(local)
 * coordinates to the Stage(global) coordinates.
 *
 * This method allows you to convert any given _x_ and _y_
 * coordinates from values that are relative to the origin(0,0) of a
 * specific display object(local coordinates) to values that are relative to
 * the origin of the Stage(global coordinates).
 *
 * To use this method, first create an instance of the Point class. The
 * _x_ and _y_ values that you assign represent local coordinates
 * because they relate to the origin of the display object.
 *
 * You then pass the Point instance that you created as the parameter to
 * the `localToGlobal()` method. The method returns a new Point
 * object with _x_ and _y_ values that relate to the origin of the
 * Stage instead of the origin of the display object.
 * 
 * @asparam point The name or identifier of a point created with the Point
 *              class, specifying the _x_ and _y_ coordinates as
 *              properties.
 * @asreturn A Point object with coordinates relative to the Stage.
 * @export
 * @param {openfl.geom.Point} point
 * @return {openfl.geom.Point}
 */
openfl.display.DisplayObject.prototype.localToGlobal = function(point) {
  return null;
};


/**
  * @export
  * @type {openfl.display.LoaderInfo} */
openfl.display.DisplayObject.prototype.loaderInfo;


/**
  * @export
  * @type {number} */
openfl.display.DisplayObject.prototype.mouseX;


/**
  * @export
  * @type {number} */
openfl.display.DisplayObject.prototype.mouseY;


/**
  * @export
  * @type {openfl.display.DisplayObjectContainer} */
openfl.display.DisplayObject.prototype.parent;


/**
  * @export
  * @type {openfl.display.DisplayObject} */
openfl.display.DisplayObject.prototype.root;


/**
  * @export
  * @type {openfl.display.Stage} */
openfl.display.DisplayObject.prototype.stage;