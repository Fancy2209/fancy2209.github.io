/**
 * Generated by Apache Royale Compiler from /home/joshua/Development/Haxe/openfl/lib/openfl/display/InteractiveObject.as
 * openfl.display.InteractiveObject
 *
 * @fileoverview
 * @externs
 *
 * @suppress {checkTypes|accessControls}
 */

/** @const */
var openfl = {};
/** @const */
openfl.display = {};

/**
 * @constructor
 * @extends {openfl.display.DisplayObject}
 */
openfl.display.InteractiveObject = function() {
};


/**
 * @export
 * @type {boolean}
 */
openfl.display.InteractiveObject.prototype.doubleClickEnabled = false;


/**
 * @export
 * @type {Object}
 */
openfl.display.InteractiveObject.prototype.focusRect = null;


/**
 * @export
 * @type {boolean}
 */
openfl.display.InteractiveObject.prototype.mouseEnabled = false;


/**
 * @export
 * @type {boolean}
 */
openfl.display.InteractiveObject.prototype.needsSoftKeyboard = false;


/**
 * @export
 * @type {openfl.geom.Rectangle}
 */
openfl.display.InteractiveObject.prototype.softKeyboardInputAreaOfInterest = null;


/**
 * @export
 * @type {boolean}
 */
openfl.display.InteractiveObject.prototype.tabEnabled = false;


/**
 * @protected
 * @return {boolean}
 */
openfl.display.InteractiveObject.prototype.get_tabEnabled = function() {
  return false;
};


/**
 * @protected
 * @param {boolean} value
 * @return {boolean}
 */
openfl.display.InteractiveObject.prototype.set_tabEnabled = function(value) {
  return false;
};


/**
 * @export
 * @type {number}
 */
openfl.display.InteractiveObject.prototype.tabIndex = 0;


/**
 * @protected
 * @return {number}
 */
openfl.display.InteractiveObject.prototype.get_tabIndex = function() {
  return 0;
};


/**
 * @protected
 * @param {number} value
 * @return {number}
 */
openfl.display.InteractiveObject.prototype.set_tabIndex = function(value) {
  return 0;
};


/**
 * Raises a virtual keyboard.
 *
 * Calling this method focuses the InteractiveObject instance and raises
 * the soft keyboard, if necessary. The `needsSoftKeyboard` must
 * also be `true`. A keyboard is not raised if a hardware keyboard
 * is available, or if the client system does not support virtual
 * keyboards.
 *
 * **Note:** This method is not supported in AIR applications on
 * iOS.
 * 
 * @asreturn A value of `true` means that the soft keyboard request
 *         was granted; `false` means that the soft keyboard was
 *         not raised.
 * @export
 * @return {boolean}
 */
openfl.display.InteractiveObject.prototype.requestSoftKeyboard = function() {
  return false;
};