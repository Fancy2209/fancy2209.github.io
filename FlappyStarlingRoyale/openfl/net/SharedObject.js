/* Royale Dependency List: */
/**
 * Generated by Apache Royale Compiler from /home/joshua/Development/Haxe/openfl/lib/openfl/net/SharedObject.as
 * openfl.net.SharedObject
 *
 * @fileoverview
 * @externs
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

/** @const */
var openfl = {};
/** @const */
openfl.net = {};

/**
 * @constructor
 * @extends {openfl.events.EventDispatcher}
 */
openfl.net.SharedObject = function() {
};


/**
 * @export
 * @type {number}
 */
openfl.net.SharedObject.defaultObjectEncoding = 0;


/**
 * @export
 * @type {Object}
 */
openfl.net.SharedObject.prototype.client = null;


/**
 * @export
 * @type {number}
 */
openfl.net.SharedObject.prototype.objectEncoding = 0;


/**
 * @protected
 * @return {number}
 */
openfl.net.SharedObject.prototype.get_size = function() {
  return 0;
};


/**
 * For local shared objects, purges all of the data and deletes the shared
 * object from the disk. The reference to the shared object is still active,
 * but its data properties are deleted.
 *
 *  For remote shared objects used with Flash Media Server,
 * `clear()` disconnects the object and purges all of the data. If
 * the shared object is locally persistent, this method also deletes the
 * shared object from the disk. The reference to the shared object is still
 * active, but its data properties are deleted. 
 * 
 * @export
 */
openfl.net.SharedObject.prototype.clear = function() {
};


/**
 * @export
 */
openfl.net.SharedObject.prototype.close = function() {
};


/**
 * @export
 * @param {openfl.net.NetConnection} myConnection
 * @param {string=} params
 */
openfl.net.SharedObject.prototype.connect = function(myConnection, params) {
};


/**
 * Immediately writes a locally persistent shared object to a local file. If
 * you don't use this method, Flash Player writes the shared object to a file
 * when the shared object session ends  -  that is, when the SWF file is
 * closed, when the shared object is garbage-collected because it no longer
 * has any references to it, or when you call
 * `SharedObject.clear()` or `SharedObject.close()`.
 *
 * If this method returns `SharedObjectFlushStatus.PENDING`,
 * Flash Player displays a dialog box asking the user to increase the amount
 * of disk space available to objects from this domain. To allow space for
 * the shared object to grow when it is saved in the future, which avoids
 * return values of `PENDING`, pass a value for
 * `minDiskSpace`. When Flash Player tries to write the file, it
 * looks for the number of bytes passed to `minDiskSpace`, instead
 * of looking for enough space to save the shared object at its current size.
 * 
 *
 * For example, if you expect a shared object to grow to a maximum size of
 * 500 bytes, even though it might start out much smaller, pass 500 for
 * `minDiskSpace`. If Flash asks the user to allot disk space for
 * the shared object, it asks for 500 bytes. After the user allots the
 * requested amount of space, Flash won't have to ask for more space on
 * future attempts to flush the object(as long as its size doesn't exceed
 * 500 bytes). 
 *
 * After the user responds to the dialog box, this method is called again.
 * A `netStatus` event is dispatched with a `code`
 * property of `SharedObject.Flush.Success` or
 * `SharedObject.Flush.Failed`. 
 * 
 * @asparam minDiskSpace The minimum disk space, in bytes, that must be
 *                     allotted for this object.
 * @asreturn Either of the following values:
 *         
 *          * `SharedObjectFlushStatus.PENDING`: The user has
 *         permitted local information storage for objects from this domain,
 *         but the amount of space allotted is not sufficient to store the
 *         object. Flash Player prompts the user to allow more space. To
 *         allow space for the shared object to grow when it is saved, thus
 *         avoiding a `SharedObjectFlushStatus.PENDING` return
 *         value, pass a value for `minDiskSpace`. 
 *          * `SharedObjectFlushStatus.FLUSHED`: The shared
 *         object has been successfully written to a file on the local
 *         disk.
 *         
 * @throws Error Flash Player cannot write the shared object to disk. This
 *               error might occur if the user has permanently disallowed
 *               local information storage for objects from this domain.
 *
 *               **Note:** Local content can always write shared
 *               objects from third-party domains(domains other than the
 *               domain in the current browser address bar) to disk, even if
 *               writing of third-party shared objects to disk is
 *               disallowed.
 * @export
 * @param {number=} minDiskSpace
 * @return {string}
 */
openfl.net.SharedObject.prototype.flush = function(minDiskSpace) {
  return null;
};


/**
 * Returns a reference to a locally persistent shared object that is only
 * available to the current client. If the shared object does not already
 * exist, this method creates one. If any values passed to
 * `getLocal()` are invalid or if the call fails, Flash Player
 * throws an exception.
 *
 * The following code shows how you assign the returned shared object
 * reference to a variable:
 *
 * `var so:SharedObject =
 * SharedObject.getLocal("savedData");`
 *
 * **Note:** If the user has chosen to never allow local storage for
 * this domain, the object is not saved locally, even if a value for
 * `localPath` is specified. The exception to this rule is local
 * content. Local content can always write shared objects from third-party
 * domains(domains other than the domain in the current browser address bar)
 * to disk, even if writing of third-party shared objects to disk is
 * disallowed. 
 *
 * To avoid name conflicts, Flash looks at the location of the SWF file
 * creating the shared object. For example, if a SWF file at
 * www.myCompany.com/apps/stockwatcher.swf creates a shared object named
 * `portfolio`, that shared object does not conflict with another
 * object named `portfolio` that was created by a SWF file at
 * www.yourCompany.com/photoshoot.swf because the SWF files originate from
 * different directories. 
 *
 * Although the `localPath` parameter is optional, you should
 * give some thought to its use, especially if other SWF files need to access
 * the shared object. If the data in the shared object is specific to one SWF
 * file that will not be moved to another location, then use of the default
 * value makes sense. If other SWF files need access to the shared object, or
 * if the SWF file that creates the shared object will later be moved, then
 * the value of this parameter affects how accessible the shared object will
 * be. For example, if you create a shared object with `localPath`
 * set to the default value of the full path to the SWF file, no other SWF
 * file can access that shared object. If you later move the original SWF
 * file to another location, not even that SWF file can access the data
 * already stored in the shared object.
 *
 * To avoid inadvertently restricting access to a shared object, use the
 * `localpath` parameter. The most permissive approach is to set
 * `localPath` to `/`(slash), which makes the shared
 * object available to all SWF files in the domain, but increases the
 * likelihood of name conflicts with other shared objects in the domain. A
 * more restrictive approach is to append `localPath` with folder
 * names that are in the full path to the SWF file. For example, for a
 * `portfolio` shared object created by the SWF file at
 * www.myCompany.com/apps/stockwatcher.swf, you could set the
 * `localPath` parameter to `/`, `/apps`, or
 * `/apps/stockwatcher.swf`. You must determine which approach
 * provides optimal flexibility for your application.
 *
 * When using this method, consider the following security model:
 * 
 *  * You cannot access shared objects across sandbox boundaries.
 *  * Users can restrict shared object access by using the Flash Player
 * Settings dialog box or the Settings Manager. By default, an application
 * can create shared objects of up 100 KB of data per domain. Administrators
 * and users can also place restrictions on the ability to write to the file
 * system.
 * 
 * 
 *
 * Suppose you publish SWF file content to be played back as local files
 * (either locally installed SWF files or EXE files), and you need to access
 * a specific shared object from more than one local SWF file. In this
 * situation, be aware that for local files, two different locations might be
 * used to store shared objects. The domain that is used depends on the
 * security permissions granted to the local file that created the shared
 * object. Local files can have three different levels of permissions:
 *
 *  1. Access to the local filesystem only.
 *  2. Access to the network only.
 *  3. Access to both the network and the local filesystem.
 *
 * Local files with access to the local filesystem(level 1 or 3) store
 * their shared objects in one location. Local files without access to the
 * local filesystem(level 2) store their shared objects in another
 * location.
 *
 * You can prevent a SWF file from using this method by setting the
 * `allowNetworking` parameter of the the `object` and
 * `embed` tags in the HTML page that contains the SWF
 * content.
 *
 * For more information, see the Flash Player Developer Center Topic:
 * [Security](http://www.adobe.com/go/devnet_security_en).
 * 
 * @asparam name      The name of the object. The name can include forward
 *                  slashes(`/`); for example,
 *                  `work/addresses` is a legal name. Spaces are
 *                  not allowed in a shared object name, nor are the
 *                  following characters: `~ % & \
 *                  ; : " ' , < > ? #`
 * @asparam localPath The full or partial path to the SWF file that created the
 *                  shared object, and that determines where the shared
 *                  object will be stored locally. If you do not specify this
 *                  parameter, the full path is used.
 * @asparam secure    Determines whether access to this shared object is
 *                  restricted to SWF files that are delivered over an HTTPS
 *                  connection. If your SWF file is delivered over HTTPS,
 *                  this parameter's value has the following effects:
 *                  
 *                   * If this parameter is set to `true`,
 *                  Flash Player creates a new secure shared object or gets a
 *                  reference to an existing secure shared object. This
 *                  secure shared object can be read from or written to only
 *                  by SWF files delivered over HTTPS that call
 *                  `SharedObject.getLocal()` with the
 *                  `secure` parameter set to
 *                  `true`.
 *                   * If this parameter is set to `false`,
 *                  Flash Player creates a new shared object or gets a
 *                  reference to an existing shared object that can be read
 *                  from or written to by SWF files delivered over non-HTTPS
 *                  connections.
 *                  
 *
 *                  If your SWF file is delivered over a non-HTTPS
 *                  connection and you try to set this parameter to
 *                  `true`, the creation of a new shared object
 *                 (or the access of a previously created secure shared
 *                  object) fails and `null` is returned.
 *                  Regardless of the value of this parameter, the created
 *                  shared objects count toward the total amount of disk
 *                  space allowed for a domain.
 *
 *                  The following diagram shows the use of the
 *                  `secure` parameter:
 * @asreturn A reference to a shared object that is persistent locally and is
 *         available only to the current client. If Flash Player can't create
 *         or find the shared object(for example, if `localPath`
 *         was specified but no such directory exists), this method throws an
 *         exception.
 * @throws Error Flash Player cannot create the shared object for whatever
 *               reason. This error might occur is if persistent shared
 *               object creation and storage by third-party Flash content is
 *               prohibited(does not apply to local content). Users can
 *               prohibit third-party persistent shared objects on the Global
 *               Storage Settings panel of the Settings Manager, located at
 *               [http://www.adobe.com/support/documentation/en/flashplayer/help/settings_manager03.html](http://www.adobe.com/support/documentation/en/flashplayer/help/settings_manager03.html).
 * @export
 * @param {string} name
 * @param {string=} localPath
 * @param {boolean=} secure
 * @return {openfl.net.SharedObject}
 */
openfl.net.SharedObject.getLocal = function(name, localPath, secure) {
  return null;
};


/**
 * @export
 * @param {string} name
 * @param {string=} remotePath
 * @param {Object=} persistence
 * @param {boolean=} secure
 * @return {openfl.net.SharedObject}
 */
openfl.net.SharedObject.getRemote = function(name, remotePath, persistence, secure) {
  return null;
};


/**
 * @export
 * @param {Array} message
 */
openfl.net.SharedObject.prototype.send = function(message) {
};


/**
 * @export
 * @param {string} propertyName
 */
openfl.net.SharedObject.prototype.setDirty = function(propertyName) {
};


/**
 * @export
 * @param {string} propertyName
 * @param {Object=} value
 */
openfl.net.SharedObject.prototype.setProperty = function(propertyName, value) {
};


/**
  * @export
  * @type {Object} */
openfl.net.SharedObject.prototype.data;


/**
  * @export
  * @type {number} */
openfl.net.SharedObject.prototype.fps;


/**
  * @export
  * @type {number} */
openfl.net.SharedObject.prototype.size;
